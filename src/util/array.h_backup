#ifndef __ARRAY_H_
#define __ARRAY_H_

#include <stdexcept>
#include <cstddef>
#include <initializer_list>
#include <stddef.h>
#include <assert.h>

template <typename T>
class Array {
public:
    Array(std::initializer_list<T> list) {
        this->_size = list.size();
        this->_data = new T[this->_size];
        for (size_t i = 0; i < this->_size; i++){
            this->_data[i] = list[i];
        }
    }

    Array(size_t size) : _size(size) {
        _data = new T[size]; 
    }

    ~Array(){
        if (_data) delete[] _data;
    }


    size_t size() const {return _size;}

    T& operator[] (size_t index) { 
        assert (index > 0 && index < _size && "Index out of range");
        return _data[index]; 
    }

private:
    size_t _size = 0;
    T * _data = nullptr;
};


#endif
